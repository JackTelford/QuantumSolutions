{"version":3,"names":["window","stripePaymentForm","stripe","clientSecret","paymentIntentId","antiForgeryToken","urlPrefix","errorText","missingText","updatePaymentIntentUrl","validateUrl","arguments","length","undefined","paramsUrl","priceUrl","errorContainerSelector","stripeFieldErrorSelector","paymentFormSelector","payButtonSelector","payTextSelector","paymentProcessingContainerSelector","placeOfPaymentSelector","payButtonValueSelector","addressesSelector","addressSelector","addressTitleSelector","allErrorContainers","document","querySelector","form","submitButton","payText","paymentProcessingContainer","stripeElements","elements","payment","create","fields","billingDetails","placeOfPayment","formElements","Array","from","toggleInputs","enable","forEach","element","readOnly","update","disabled","hidden","displayError","errors","container","err","isArray","filter","error","innerHTML","ul","li","createElement","textContent","message","appendChild","scrollIntoView","block","fetchPost","path","fetch","method","body","FormData","then","response","json","getText","trim","mount","stripeFieldError","push","on","event","addEventListener","async","result","preventDefault","emptyRequiredFields","querySelectorAll","required","value","match","map","id","label","closest","title","name","replace","validationJson","confirmPaymentOptions","confirmParams","confirmPayment","registerElements","debounce","payButtonValue","setTimeout","priceJson","setAttribute","currency","text","registerPriceUpdater"],"sources":["../../Assets/Scripts/stripe-payment-form.js"],"sourcesContent":["window.stripePaymentForm = function stripePaymentForm(\r\n    stripe,\r\n    clientSecret,\r\n    paymentIntentId,\r\n    antiForgeryToken,\r\n    urlPrefix,\r\n    errorText,\r\n    missingText,\r\n    updatePaymentIntentUrl,\r\n    validateUrl = 'checkout/validate/stripe',\r\n    paramsUrl = 'stripe/params',\r\n    priceUrl = 'checkout/price',\r\n    errorContainerSelector = '.message-error',\r\n    stripeFieldErrorSelector = '.stripe-field-error',\r\n    paymentFormSelector = '.payment-form',\r\n    payButtonSelector = '.pay-button-stripe',\r\n    payTextSelector = '.pay-text',\r\n    paymentProcessingContainerSelector = '.payment-processing-container',\r\n    placeOfPaymentSelector = '#payment-form_payment',\r\n    payButtonValueSelector = '.pay-button-value',\r\n    addressesSelector = '*[id^=\"OrderPart_ShippingAddress_\"], *[id^=\"OrderPart_BillingAddress_\"]',\r\n    addressSelector = '.address',\r\n    addressTitleSelector = '.address__title'\r\n) {\r\n    const allErrorContainers = [document.querySelector(errorContainerSelector)];\r\n    const form = document.querySelector(paymentFormSelector);\r\n    const submitButton = form.querySelector(payButtonSelector);\r\n    const payText = submitButton.querySelector(payTextSelector);\r\n    const paymentProcessingContainer = submitButton.querySelector(paymentProcessingContainerSelector);\r\n    const stripeElements = stripe.elements({ clientSecret });\r\n    const payment = stripeElements.create('payment', { fields: { billingDetails: 'never' } });\r\n    const placeOfPayment = document.querySelector(placeOfPaymentSelector);\r\n\r\n    let formElements = Array.from(form.elements);\r\n\r\n    function toggleInputs(enable) {\r\n        formElements.forEach((element) => {\r\n            element.readOnly = !enable;\r\n        });\r\n\r\n        payment.update({ readOnly: !enable });\r\n        submitButton.disabled = !enable;\r\n        paymentProcessingContainer.hidden = enable;\r\n        payText.hidden = !enable;\r\n    }\r\n\r\n    function displayError(errors, container = allErrorContainers[0]) {\r\n        allErrorContainers.forEach((element) => { element.hidden = true; });\r\n        if (!errors || errors.length === 0) return;\r\n\r\n        const err = Array.isArray(errors) ? errors.filter((error) => error) : [errors];\r\n\r\n        container.innerHTML = '<ul></ul>';\r\n        const ul = container.querySelector('ul');\r\n        err.forEach((error) => {\r\n            const li = document.createElement('li');\r\n            li.textContent = error.message || error;\r\n            ul.appendChild(li);\r\n        });\r\n\r\n        toggleInputs(true);\r\n        container.hidden = false;\r\n        container.scrollIntoView({ block: 'center' });\r\n    }\r\n\r\n    function fetchPost(path) {\r\n        return fetch(`${urlPrefix}/${path}`, { method: 'POST', body: new FormData(form) })\r\n            .then((response) => response.json());\r\n    }\r\n\r\n    function getText(element) {\r\n        return element?.textContent.trim();\r\n    }\r\n\r\n    function registerElements() {\r\n        // Displaying payment input error.\r\n        const stripeFieldError = document.querySelector(stripeFieldErrorSelector);\r\n        allErrorContainers.push(stripeFieldError);\r\n        payment.on('change', (event) => {\r\n            displayError(event?.error, stripeFieldError);\r\n        });\r\n\r\n        submitButton.addEventListener('click', async (event) => {\r\n            // We don't want to let default form submission happen here, which would refresh the page.\r\n            event.preventDefault();\r\n            toggleInputs(false);\r\n\r\n            let result;\r\n            try {\r\n                const emptyRequiredFields = Array.from(form.querySelectorAll('input'))\r\n                    .filter((element) => element.required && !element.hidden)\r\n                    .filter((element) => !element.value?.match(/\\S+/));\r\n\r\n                if (emptyRequiredFields.length) {\r\n                    toggleInputs(true);\r\n                    throw emptyRequiredFields\r\n                        .map((element) => document.querySelector(`label[for=\"${element.id}\"]`))\r\n                        .filter(getText)\r\n                        .filter((label) => !label.closest(addressSelector)?.hidden)\r\n                        .map((label) => {\r\n                            const title = getText(label.closest(addressSelector)?.querySelector(addressTitleSelector));\r\n                            const name = title ? `${title} ${getText(label)}` : getText(label);\r\n                            return missingText.replace('%LABEL%', name);\r\n                        });\r\n                }\r\n\r\n                const validationJson = await fetchPost(`${validateUrl}/${paymentIntentId}`);\r\n                if (validationJson?.errors?.length) {\r\n                    toggleInputs(true);\r\n                    throw validationJson.errors;\r\n                }\r\n\r\n                const confirmPaymentOptions = {\r\n                    elements: stripeElements,\r\n                    confirmParams: await fetchPost(paramsUrl),\r\n                };\r\n                result = await stripe.confirmPayment(confirmPaymentOptions);\r\n\r\n                displayError(result.error);\r\n            }\r\n            catch (error) {\r\n                result = { error };\r\n                displayError(result.error);\r\n            }\r\n        });\r\n    }\r\n\r\n    function registerPriceUpdater() {\r\n        let debounce = false;\r\n        Array.from(document.querySelectorAll(addressesSelector))\r\n            .forEach((element) => element.addEventListener('change', () => {\r\n                if (debounce) return;\r\n\r\n                const payButtonValue = document.querySelector(payButtonValueSelector);\r\n                if (!payButtonValue) return;\r\n\r\n                debounce = true;\r\n                submitButton.disabled = true;\r\n\r\n                setTimeout(async () => {\r\n                    const priceJson = await fetchPost(priceUrl);\r\n                    debounce = false;\r\n                    submitButton.disabled = false;\r\n\r\n                    // This is not essential if it fails so we intentionally don't catch it. This way if there is an error it can still be seen in the\r\n                    // browser log during development or UI testing.\r\n                    if ('error' in priceJson) throw priceJson;\r\n\r\n                    payButtonValue.setAttribute('data-value', priceJson.value);\r\n                    payButtonValue.setAttribute('data-currency', priceJson.currency);\r\n                    payButtonValue.textContent = priceJson.text;\r\n                }, 50); // Prevent multiple requests when several fields are updated at once.\r\n            }));\r\n    }\r\n\r\n    if (placeOfPayment) {\r\n        payment.mount(placeOfPayment);\r\n\r\n        // Refreshing form elements with the payment input.\r\n        formElements = Array.from(form.elements);\r\n        registerElements();\r\n        registerPriceUpdater();\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]}