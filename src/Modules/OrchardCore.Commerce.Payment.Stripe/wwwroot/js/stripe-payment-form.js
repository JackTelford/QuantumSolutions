"use strict";

window.stripePaymentForm = function stripePaymentForm(stripe, clientSecret, paymentIntentId, antiForgeryToken, urlPrefix, errorText, missingText, updatePaymentIntentUrl) {
  let validateUrl = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 'checkout/validate/stripe';
  let paramsUrl = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 'stripe/params';
  let priceUrl = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 'checkout/price';
  let errorContainerSelector = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : '.message-error';
  let stripeFieldErrorSelector = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : '.stripe-field-error';
  let paymentFormSelector = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : '.payment-form';
  let payButtonSelector = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : '.pay-button-stripe';
  let payTextSelector = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : '.pay-text';
  let paymentProcessingContainerSelector = arguments.length > 16 && arguments[16] !== undefined ? arguments[16] : '.payment-processing-container';
  let placeOfPaymentSelector = arguments.length > 17 && arguments[17] !== undefined ? arguments[17] : '#payment-form_payment';
  let payButtonValueSelector = arguments.length > 18 && arguments[18] !== undefined ? arguments[18] : '.pay-button-value';
  let addressesSelector = arguments.length > 19 && arguments[19] !== undefined ? arguments[19] : '*[id^="OrderPart_ShippingAddress_"], *[id^="OrderPart_BillingAddress_"]';
  let addressSelector = arguments.length > 20 && arguments[20] !== undefined ? arguments[20] : '.address';
  let addressTitleSelector = arguments.length > 21 && arguments[21] !== undefined ? arguments[21] : '.address__title';
  const allErrorContainers = [document.querySelector(errorContainerSelector)];
  const form = document.querySelector(paymentFormSelector);
  const submitButton = form.querySelector(payButtonSelector);
  const payText = submitButton.querySelector(payTextSelector);
  const paymentProcessingContainer = submitButton.querySelector(paymentProcessingContainerSelector);
  const stripeElements = stripe.elements({
    clientSecret
  });
  const payment = stripeElements.create('payment', {
    fields: {
      billingDetails: 'never'
    }
  });
  const placeOfPayment = document.querySelector(placeOfPaymentSelector);
  let formElements = Array.from(form.elements);
  function toggleInputs(enable) {
    formElements.forEach(element => {
      element.readOnly = !enable;
    });
    payment.update({
      readOnly: !enable
    });
    submitButton.disabled = !enable;
    paymentProcessingContainer.hidden = enable;
    payText.hidden = !enable;
  }
  function displayError(errors) {
    let container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : allErrorContainers[0];
    allErrorContainers.forEach(element => {
      element.hidden = true;
    });
    if (!errors || errors.length === 0) return;
    const err = Array.isArray(errors) ? errors.filter(error => error) : [errors];
    container.innerHTML = '<ul></ul>';
    const ul = container.querySelector('ul');
    err.forEach(error => {
      const li = document.createElement('li');
      li.textContent = error.message || error;
      ul.appendChild(li);
    });
    toggleInputs(true);
    container.hidden = false;
    container.scrollIntoView({
      block: 'center'
    });
  }
  function fetchPost(path) {
    return fetch(`${urlPrefix}/${path}`, {
      method: 'POST',
      body: new FormData(form)
    }).then(response => response.json());
  }
  function getText(element) {
    return element?.textContent.trim();
  }
  function registerElements() {
    // Displaying payment input error.
    const stripeFieldError = document.querySelector(stripeFieldErrorSelector);
    allErrorContainers.push(stripeFieldError);
    payment.on('change', event => {
      displayError(event?.error, stripeFieldError);
    });
    submitButton.addEventListener('click', async event => {
      // We don't want to let default form submission happen here, which would refresh the page.
      event.preventDefault();
      toggleInputs(false);
      let result;
      try {
        const emptyRequiredFields = Array.from(form.querySelectorAll('input')).filter(element => element.required && !element.hidden).filter(element => !element.value?.match(/\S+/));
        if (emptyRequiredFields.length) {
          toggleInputs(true);
          throw emptyRequiredFields.map(element => document.querySelector(`label[for="${element.id}"]`)).filter(getText).filter(label => !label.closest(addressSelector)?.hidden).map(label => {
            const title = getText(label.closest(addressSelector)?.querySelector(addressTitleSelector));
            const name = title ? `${title} ${getText(label)}` : getText(label);
            return missingText.replace('%LABEL%', name);
          });
        }
        const validationJson = await fetchPost(`${validateUrl}/${paymentIntentId}`);
        if (validationJson?.errors?.length) {
          toggleInputs(true);
          throw validationJson.errors;
        }
        const confirmPaymentOptions = {
          elements: stripeElements,
          confirmParams: await fetchPost(paramsUrl)
        };
        result = await stripe.confirmPayment(confirmPaymentOptions);
        displayError(result.error);
      } catch (error) {
        result = {
          error
        };
        displayError(result.error);
      }
    });
  }
  function registerPriceUpdater() {
    let debounce = false;
    Array.from(document.querySelectorAll(addressesSelector)).forEach(element => element.addEventListener('change', () => {
      if (debounce) return;
      const payButtonValue = document.querySelector(payButtonValueSelector);
      if (!payButtonValue) return;
      debounce = true;
      submitButton.disabled = true;
      setTimeout(async () => {
        const priceJson = await fetchPost(priceUrl);
        debounce = false;
        submitButton.disabled = false;

        // This is not essential if it fails so we intentionally don't catch it. This way if there is an error it can still be seen in the
        // browser log during development or UI testing.
        if ('error' in priceJson) throw priceJson;
        payButtonValue.setAttribute('data-value', priceJson.value);
        payButtonValue.setAttribute('data-currency', priceJson.currency);
        payButtonValue.textContent = priceJson.text;
      }, 50); // Prevent multiple requests when several fields are updated at once.
    }));
  }
  if (placeOfPayment) {
    payment.mount(placeOfPayment);

    // Refreshing form elements with the payment input.
    formElements = Array.from(form.elements);
    registerElements();
    registerPriceUpdater();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,